#!/usr/bin/env python
import os
import sys

import argparse
import github

from groundstation.station import Station
from groundstation.node import Node

from groundstation import logger
log = logger.getLogger(__name__)

from groundstation.protocols.github.write_adaptor import GithubWriteAdaptor


class NoGithubToken(Exception): pass


class InvalidOptions(Exception): pass


def _create_option_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--repo", dest='repo', action='store')
    parser.add_argument("--all", dest='all', action='store_true', default=False)
    return parser


def _create_station():
    station_path = os.path.expanduser("~/.groundstation")
    myself = Node()
    station = Station(station_path, myself)
    return station


def main(argv):
    if "GITHUB_TOKEN" not in os.environ:
        raise NoGithubToken()

    parser = _create_option_parser()
    station = _create_station()

    args = parser.parse_args(argv[1:])

    gh = github.Github(os.getenv("GITHUB_TOKEN"))
    if args.all:
        repos = gh.get_user().get_repos()
    else:
        if not args.repo:
            raise InvalidOptions("Requires --all or --repo <repo>")
        repos = [gh.get_repo(args.repo)]

    for repo in repos:
        adaptor = GithubWriteAdaptor(station, repo)
        log.info("fetching %s" % (repo.name))
        for issue in repo.get_issues(state="open,closed"):
            adaptor.write_issue(issue)

if __name__ == "__main__":
    main(sys.argv)

    # def __init__(self, id, channel, protocol):
